// DAZ Studio version 4.12.0.86 filetype DAZ Script

// Global Variables
var g_sBridge = "Maya"
var g_sDazBridgeName = String( "Daz To %1" ).arg( g_sBridge )
var g_oFileInfo = new DzFileInfo( getScriptFileName() );
var g_sScriptPath = g_oFileInfo.path();
if( g_sScriptPath === "" ){
	// To be able to use the IDE Input your absolute Path.
	g_sScriptPath = "D:/GitRepos/DazToMaya/Daz Studio/appdir_common/scripts/support/DAZ"
}	
g_oFileInfo.deleteLater();

// Global Includes
var g_sBridgeHelpers = String( "%2/dzBridgeUtils/Dz%1Helpers.dsa" ).arg( g_sBridge ).arg( g_sScriptPath );
var g_sBridgeEnv = String( "%2/dzBridgeUtils/Dz%1Environment.dsa" ).arg( g_sBridge ).arg( g_sScriptPath );
var g_sBridgeScene = String( "%2/dzBridgeUtils/Dz%1Scene.dsa" ).arg( g_sBridge ).arg( g_sScriptPath );
var g_sBridgePose = String( "%2/dzBridgeUtils/Dz%1Morphs.dsa" ).arg( g_sBridge ).arg( g_sScriptPath );
var g_sBridgeMorphs = String( "%2/dzBridgeUtils/Dz%1Pose.dsa" ).arg( g_sBridge ).arg( g_sScriptPath );
var g_sBridgeAutoWeight = String( "%2/dzBridgeUtils/Dz%1AutoWeight.dsa" ).arg( g_sBridge ).arg( g_sScriptPath );
var g_sBridgeExporter = String( "%2/dzBridgeUtils/Dz%1BridgeExporter.dsa" ).arg( g_sBridge ).arg( g_sScriptPath );
var g_sBridgeDialog = String( "%2/dzBridgeUtils/Dz%1Dialog.dsa" ).arg( g_sBridge ).arg( g_sScriptPath )
var g_sBridgeWriter = String( "%2/dzBridgeUtils/Dz%1Writer.dsa" ).arg( g_sBridge ).arg( g_sScriptPath );
var g_sBridgeFigure = String( "%2/dzBridgeUtils/Dz%1Figure.dsa" ).arg( g_sBridge ).arg( g_sScriptPath );
var g_sBridgeSubdiv = String( "%2/dzBridgeUtils/Dz%1Subdivision.dsa" ).arg( g_sBridge ).arg( g_sScriptPath );

include( g_sBridgeHelpers ); // Dependencies : ...
include( g_sBridgeEnv );  // Dependencies : DzBridgeHelper
include( g_sBridgeWriter ); // Dependencies : DzBridgeHelper
include( g_sBridgeFigure ); // Dependencies : DzBridgeHelper
include( g_sBridgeSubdiv ); // Dependencies : DzBridgeHelper
include( g_sBridgeScene ); // Dependencies : DzBridgeHelper
include( g_sBridgeMorphs ); // Dependencies : DzBridgeHelper
include( g_sBridgePose ); // Dependencies : DzBridgeHelper
include( g_sBridgeAutoWeight ); // Dependencies : DzBridgeHelper
include( g_sBridgeExporter ); // Dependencies : DzBridgeHelper, DzBridgeMorphs
include( g_sBridgeDialog ); // Dependencies : DzBridgeHelper

(function( aArgs ){
	var s_nSubDivLevel;

	/*********************************************************************/
	/** 
	* Void: initalizes any arguments passed to the silent exporter
	*/
    function initilizeArgs( oBridgeDialog )
    {
        for( var i = 0, nArgs = aArgs.length; i < nArgs; i += 1 ){
            vArg = aArgs[i];
            if( i == 0 ){
				oBridgeDialog.bSilent = vArg;
			}
			else if( i == 1 ){
				s_nSubDivLevel = vArg;
			}
			else if( i == 2 ){
				oBridgeDialog.bIncludeAnim = vArg;
			}
			else if( i == 3 ){
				oBridgeDialog.bRemoveIncompatible = vArg;
			}
			else if( i == 4 ){
				oBridgeDialog.bIncludeMorphs = vArg;
			}
			else if( i == 5 ){
				oBridgeDialog.bCollectTextures = vArg;
			}
			else if( i == 6 ){
				oBridgeDialog.bAutoWeights = vArg;
			}
			else if( i == 7 ){
				oBridgeDialog.sMorphPath = vArg;
			}
			else if( i == 8 ){
				oBridgeDialog.bNewSubdiv = vArg;
			}
        }

    };

	/*********************************************************************/
	// void : ...
	function main()
	{
		var bDebugFBX = false;

		var oBridgeScene = new DzBridgeScene();
		
		oBridgeScene.buildRootLists();
		var oBridgeExporter = new DzBridgeExporter( g_sDazBridgeName, 
													g_sScriptPath,
													oBridgeScene
												   );
		var oBridgeDialog = new DzBridgeDialog( oBridgeExporter );
		
		// initilizeArgs( oBridgeDialog )

		if( !oBridgeDialog.bSilent ){
			switch( oBridgeScene.getExportType() ){
				case 2:
					nExportType = oBridgeDialog.promptExportType();
					if( nExportType == oBridgeDialog.oExportTypes.None ){
						return
					}
					oBridgeScene.overrideExportType( nExportType );
					break
				case -1:
					return
				case 0:
					break
				case 1:
					break
			}
		}
		var oBridgeAutoWeights = new DzBridgeAutoWeight( oBridgeExporter.sRootPath );
		var oBridgePose = new DzBridgePose();
		var oBridgeEnvironment = new DzBridgeEnvironment()
		var sFileBasename;
		var sBaseDirectory; 
		var nExportType = oBridgeScene.getExportType()
		if( nExportType == oBridgeScene.oExportTypes.Both
		|| nExportType == oBridgeScene.oExportTypes.Figure ){
			oBridgeScene.setHideRoot( false, false );
			
			var oFigure;
			for( var i = 0; i < oBridgeScene.aFigures.length; i++ ){
				oFigure = oBridgeScene.aFigures[i];
				
				for( var j = 0; j < oBridgeScene.aFigures.length; j++ ){
					oBridgeScene.setVisible( oBridgeScene.aFigures[j], i == j );
				}
				if( !oBridgeDialog.bSilent ){
					if( !oBridgeDialog.promptSettings( oFigure ) ){
						continue;
					}
					oBridgeExporter.bIncludeAnim = oBridgeDialog.bIncludeAnim;
				};
				if( oBridgeDialog.bAutoWeights ){ 
					if( !oBridgeDialog.bSilent ){
						if( MessageBox.warning(
							qsTr( "Transfering the Weights will destroy the current state of your scene save your scene before exporting." ),
							g_sDazBridgeName, qsTr( "&Continue" ), qsTr( "&Cancel" ) ) == 1 ){
							return;
						}
					};
					oBridgeAutoWeights.weightObjects( oFigure )
				}

				oBridgeExporter.setLock( oFigure, true, true );
				oBridgeExporter.makeEndDir( i, oBridgeScene.sFig );
				
				// Morph Export
				if( oBridgeDialog.bIncludeMorphs ){
					oBridgeExporter.getMorphString( oBridgeDialog.aExportableProperties );
					oBridgeExporter.loadMorphLinks( oBridgeDialog.aExportableProperties, oFigure );
					oBridgeExporter.disconnectMorphs( oBridgeDialog.aExportableProperties );
					// oBridgeExporter.disconnectSkeleton( oFigure );
				};	
				// Export Figure
				var oBridgeFigure = new DzBridgeFigure( oFigure );
				var oBridgeSubdiv = new DzBridgeSubdivision( g_sScriptPath, oBridgeDialog );

				oBridgeFigure.loadFigureBoneData();
				oBridgePose.loadPoseData( oFigure, true );
				
				if( oBridgeDialog.bRemoveIncompatible ){
					oBridgeFigure.removeIncompatibleNodes( oFigure );
				}
				if( oBridgeDialog.bIncludeSubdiv && oBridgeSubdiv.isSubdivPrereq() ){
					oBridgeSubdiv.lockSubdivisionProperties( true );
					oBridgeFigure.setEyelashVisibility( oFigure, false );
					oBridgeExporter.exportOBJ( oFigure, oBridgeScene.sFig, i, false );
					oBridgeFigure.setEyelashVisibility( oFigure, true );
					oBridgeExporter.exportFBX( oFigure, oBridgeScene.sFig, i , "_HD" , bDebugFBX );
					oBridgeSubdiv.lockSubdivisionProperties( false );
					oBridgeExporter.exportFBX( oFigure, oBridgeScene.sFig, i , "_base" , bDebugFBX );
				}
				else if( oBridgeSubdiv.bIncludeSubdiv ){
					oBridgeSubdiv.lockSubdivisionProperties( true );
					oBridgeFigure.setEyelashVisibility( oFigure, false );
					oBridgeExporter.exportOBJ( oFigure, oBridgeScene.sFig, i, false );
					oBridgeFigure.setEyelashVisibility( oFigure, true );
					oBridgeExporter.exportFBX( oFigure, oBridgeScene.sFig, i , "" ,bDebugFBX );
				}
				else{
					oBridgeSubdiv.lockSubdivisionProperties( false );
					oBridgeFigure.setEyelashVisibility( oFigure, false );
					oBridgeExporter.exportOBJ( oFigure, oBridgeScene.sFig, i, false );
					oBridgeFigure.setEyelashVisibility( oFigure, true );
					oBridgeExporter.exportFBX( oFigure, oBridgeScene.sFig, i , "" ,bDebugFBX );
				}

				oBridgeExporter.setLock( oFigure, false, true );
				oBridgePose.restorePose( oFigure );
				oBridgeScene.reparentFigure( oFigure );
				if ( oBridgeDialog.bIncludeMorphs ){
					oBridgeExporter.reconnectMorphs( oBridgeDialog.aExportableProperties );
					// oBridgeExporter.reconnectSkeleton( oFigure );
				}

				// Write data
				sFileBasename = String( "%1%2/%2%3/%2" ).arg( oBridgeExporter.sRootPath ).arg( oBridgeScene.sFig ).arg( i );
				sBaseDirectory = String( "%1%2/%2%3" ).arg( oBridgeExporter.sRootPath ).arg( oBridgeScene.sFig ).arg( i );
				
				oBridgeWriter = new DzBridgeWriter( oBridgeExporter, oBridgeFigure, oBridgePose, oBridgeDialog )
				oBridgeWriter.bCollectTextures = oBridgeDialog.bCollectTextures
				oBridgeWriter.writeParentingData( oFigure, sFileBasename + ".dat" );
				sDtufilename = oBridgeWriter.writeConfiguration( oFigure, sFileBasename, sBaseDirectory );
				if( oBridgeDialog.bIncludeSubdiv && oBridgeDialog.bNewSubdiv ){
					oBridgeSubdiv.processFBX( sDtufilename )
				}
				

			}
		}

		if( nExportType != oBridgeScene.oExportTypes.Figure ){
			oBridgeScene.setHideRoot( true, false );
			
			var oNode;
			var bIsBone;
			var sEnvPath;
			var sFileBasename;
			
			for( var i = 0; i < oBridgeScene.aEnvProp.length; i += 1 ){
				oNode = oBridgeScene.aEnvProp[i];

				for( var j = 0; j < oBridgeScene.aEnvProp.length; j += 1 ){
					oBridgeScene.setVisible( oBridgeScene.aEnvProp[j], i == j );
				}
				
				bIsBone = oNode.getSkeleton() != null;
				if( bIsBone ){
					oBridgeEnvironment.flattenObjectHierarchy( oNode );
				}
				else{
					oBridgeExporter.setLock( oNode, true, false );
				}
				
				oBridgeSubdiv = new DzBridgeSubdivision( g_sScriptPath, {} )
				oBridgeSubdiv.setSubDivLevelAll( oNode, 0 );
				
				sEnvPath = String( "%1%2/%2%3/" ).arg( oBridgeExporter.sRootPath ).arg( oBridgeScene.sEnv ).arg( i );
				oBridgeExporter.makeEndDir( i, oBridgeScene.sEnv );
				
				oBridgeEnvironment.updateName( oNode );
				
				oBridgeExporter.exportFBX( oNode, oBridgeScene.sEnv, i, "", bDebugFBX );
				
				sFileBasename = sEnvPath + oBridgeScene.sEnv;
				
				if( bIsBone ){
					oBridgeFigure = new DzBridgeFigure( oNode );
					oBridgeFigure.loadFigureBoneData();
					oBridgePose.loadPoseData( oNode, true );
					oBridgeWriter = new DzBridgeWriter( oBridgeExporter, oBridgeFigure, oBridgePose, oBridgeDialog )
				} else {
					oBridgePose.loadPoseData( oNode, false );
					oBridgeWriter = new DzBridgeWriter( oBridgeExporter, {}, oBridgePose, oBridgeDialog )
					oBridgeWriter.writeMemo( sEnvPath + "nobone.txt", "not skeleton" );
					oBridgeExporter.setLock( oNode, false, false );
				}
				oBridgeEnvironment.updateName( oNode );
				
				oBridgeWriter.writeConfiguration( oNode, sFileBasename );

			}
		}
		
		oBridgeScene.setHideRoot( true, true );
		oBridgeScene.setHideRoot( false, true );
	};
	
	/*********************************************************************/
	main();

})( getArguments() );